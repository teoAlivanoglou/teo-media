<script lang="ts">
	import { onMount, onDestroy } from 'svelte';
	// import {GPUCanvasRenderer} from '$lib/webgpu';
    import {WebGLCanvasRenderer as GPUCanvasRenderer} from '$lib/webgl';
    import sample_background from '$lib/assets/bg.jpg';
    import sample_foreground from '$lib/assets/fg.jpg';

    let bgUrl = $state<string | null>(sample_background);
    let fgUrl = $state<string | null>(sample_foreground);
    let isLoading = $state(false);

    let canvasEl!: HTMLCanvasElement;
    let renderer: GPUCanvasRenderer | null = null;
    let mix = $state(0.5);
    let info = $state('Waiting...');

    // Drag-over highlight state
    let bgDragOver = $state(false);
    let fgDragOver = $state(false);
    let bgDropped = $state(false);

	// Initialize WebGPU renderer
	onMount(async () => {
		if (!canvasEl) return;

    try {
        info = 'Initializing WebGPU...';
    renderer = new GPUCanvasRenderer(canvasEl);
    await renderer.init();
    info = 'WebGPU Ready';

    // Load initial images if present
    if (bgUrl) {
        await renderer.updateTexture(0, bgUrl);
			}
    if (fgUrl) {
        await renderer.updateTexture(1, fgUrl);
			}
		} catch (error) {
        info = 'WebGPU Error';
    console.error('Failed to initialize WebGPU:', error);
		}
	});

	// React to mix changes
	$effect(() => {
		if (renderer) {
        renderer.setMixValue(mix);
		}
	});

	// React to background URL changes
	$effect(() => {
		if (renderer && bgUrl) {
        renderer.updateTexture(0, bgUrl);
		}
	});

	// React to foreground URL changes
	$effect(() => {
		if (renderer && fgUrl) {
        renderer.updateTexture(1, fgUrl);
		}
	});

    function removeBg() {
        bgUrl = null;
	}

    function removeFg() {
        fgUrl = null;
	}

    function handleDropBg(event: DragEvent) {
        event.preventDefault();
    bgDragOver = false;
    if (!event.dataTransfer) return;

    const file = event.dataTransfer.files[0];
    if (file && file.type.startsWith('image/')) {
        bgUrl = URL.createObjectURL(file);
    bgDropped = true;
			setTimeout(() => (bgDropped = false), 300);
		}
	}

    function handleDropFg(event: DragEvent) {
        event.preventDefault();
    fgDragOver = false;
    if (!event.dataTransfer) return;

    const file = event.dataTransfer.files[0];
    if (file && file.type.startsWith('image/')) {
        fgUrl = URL.createObjectURL(file);
		}
	}

    function allowDropBg(event: DragEvent) {
        event.preventDefault();
    bgDragOver = true;
	}

    function allowDropFg(event: DragEvent) {
        event.preventDefault();
    fgDragOver = true;
	}

    function dragLeaveBg() {
        bgDragOver = false;
	}

    function dragLeaveFg() {
        fgDragOver = false;
	}

    let containerAspect: number = 0;
    let containerEl: HTMLDivElement | null = null;
    let resizeObserver: ResizeObserver | null = null;

	onMount(() => {
		if (!containerEl) return;

		resizeObserver = new ResizeObserver((entries: ResizeObserverEntry[]) => {
			for (const entry of entries) {
				const {width, height} = entry.contentRect;
    containerAspect = width / height;
    console.log('Updated aspect ratio:', containerAspect);
			}
		});

    resizeObserver.observe(containerEl);
	});

	onDestroy(() => {
		if (resizeObserver) resizeObserver.disconnect();
	});
</script>

    <div
        bind:this={containerEl}
        class="h-full grid [grid-template-areas:'previews canvas'] grid-cols-[1fr_2fr] gap-4"
    >
        <!-- Previews card -->
        <div class="area-previews bg-white rounded-2xl shadow-lg border border-gray-200 p-6 min-h-0">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">Previews</h3>
            <div class="flex flex-col gap-4">
                <!-- Background drop zone -->
                <div
                    role="region"
                    aria-label="Background drop zone"
                    aria-dropeffect="copy"
                    class={`relative w-full aspect-[3/1] rounded-xl overflow-hidden flex items-center justify-center
          ${bgDragOver
                            ? 'border-2 border-dashed border-blue-300 bg-blue-50'
                            : bgUrl
                                ? 'border-2 border-solid border-blue-100 bg-[repeating-conic-gradient(from_1deg,theme(colors.gray.100)_0_25%,theme(colors.white)_0_50%)] bg-size-[4ch_4ch]'
                                : 'border-2 border-dashed border-gray-300 bg-gray-100'
                        }
        `}
                    ondrop={handleDropBg}
                    ondragover={allowDropBg}
                    ondragleave={dragLeaveBg}
                >
                    {#if bgUrl}
                    <img
                        class="object-contain w-full h-full pointer-events-none"
                        src={bgUrl}
                        alt="Background Preview"
                    />
                    <button
                        class="absolute top-2 right-2 bg-white rounded-full p-1 shadow hover:bg-gray-200 transition text-sm"
                        onclick={removeBg}
                    >
                        ✕
                    </button>
                    {:else}
                    <div class="flex flex-col items-center text-gray-400 text-sm pointer-events-none">
                        <span class="text-xl mb-1">⬇️</span>
                        <span>Drop background</span>
                    </div>
                    {/if}
                </div>

                <!-- Foreground drop zone -->
                <div
                    role="region"
                    aria-label="Foreground drop zone"
                    aria-dropeffect="copy"
                    class={`relative w-full aspect-[3/1] rounded-xl overflow-hidden flex items-center justify-center
          ${fgDragOver
                            ? 'border-2 border-dashed border-blue-400 bg-blue-50'
                            : fgUrl
                                ? 'border-2 border-solid border-blue-100 bg-[repeating-conic-gradient(from_1deg,theme(colors.gray.200)_0_25%,theme(colors.white)_0_50%)] bg-size-[4ch_4ch]'
                                : 'border-2 border-dashed border-gray-300 bg-gray-100'
                        }
        `}
                    ondrop={handleDropFg}
                    ondragover={allowDropFg}
                    ondragleave={dragLeaveFg}
                >
                    {#if fgUrl}
                    <img
                        class="object-contain w-full h-full pointer-events-none"
                        src={fgUrl}
                        alt="Foreground Preview"
                    />
                    <button
                        class="absolute top-2 right-2 bg-white rounded-full p-1 shadow hover:bg-gray-200 transition text-sm"
                        onclick={removeFg}
                    >
                        ✕
                    </button>
                    {:else}
                    <div class="flex flex-col items-center text-gray-400 text-sm pointer-events-none">
                        <span class="text-xl mb-1">⬇️</span>
                        <span>Drop foreground</span>
                    </div>
                    {/if}
                </div>
            </div>
        </div>

        <!-- Canvas card -->
        <div
            class="area-canvas bg-white rounded-2xl shadow-lg border border-gray-200 p-6 flex flex-col relative min-h-0"
        >
            <div class="flex justify-between items-center gap-2 mb-4 flex-shrink-0">
                <h2 class="text-xl font-semibold text-gray-800">Blended Canvas</h2>
                <span class="text-sm text-gray-500">{info}</span>
            </div>

            <div class="flex-1 flex items-center justify-center min-h-0">
                <canvas
                    bind:this={canvasEl}
                    width="1920"
                    height="1080"
                    class="max-w-full max-h-full object-contain rounded-lg shadow-inner bg-gray-900"
                ></canvas>
            </div>

            <div
                class="absolute bottom-4 right-4 bg-white/90 backdrop-blur-sm rounded-lg shadow-lg border border-gray-200 p-3 flex items-center gap-3"
            >
                <label class="flex items-center gap-2 text-gray-700 font-medium text-sm">
                    Mix
                    <input
                        type="range"
                        min="0"
                        max="1"
                        step="0.01"
                        bind:value={mix}
                        class="w-20 accent-blue-500"
                    />
                </label>
                <span class="text-gray-600 text-sm font-mono">{Math.round(mix * 100)}%</span>
            </div>
        </div>
    </div>
